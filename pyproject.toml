[project]
name = "tsbootstrap"
version = "0.1.5"
description = "A Python package to generate bootstrapped time series"
maintainers = [
    { name = "Sankalp Gilda", email = "sankalp.gilda@gmail.com" },
    { name = "Franz Kiraly", email = "franz.kiraly@sktime.net"},
    { name = "Benedikt Heidrich", email = "benedikt.heidrich@sktime.net"},
]
authors = [
    { name = "Sankalp Gilda", email = "sankalp.gilda@gmail.com" },
]
license = { file = "LICENSE" }
readme = "README.md"
requires-python = ">=3.9,<3.13"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: Unix",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "numpy<1.27,>=1.21",
    "scikit-base>=0.12,<0.13",
    "scikit-learn>=1.5.1,<1.6.0",
    "scipy>=1.10,<1.14.0",
    "packaging>=24.0,<24.2",
    "pydantic>=2.0,<3.0",
    "arch>=7.0.0,<7.1.0",
    "statsforecast>=1.7.0,<2.0.0",
    "pandas>=2.0.0,<3.0.0",
]

[project.optional-dependencies]

all-extras = [
    "hmmlearn>=0.3.0,<0.3.2",
    "pyclustering>=0.10.0,<0.11.0",
    "scikit_learn_extra>=0.3.0,<0.4.0",
    "statsmodels>=0.14.2,<0.15.0",
    "dtaidistance; python_version < '3.10'",
]

async-extras = [
    "anyio>=4.0.0",  # For framework-agnostic async support
    "trio>=0.26.0",  # For trio backend support
]

docs = [
    "furo",
    "jupyter",
    "myst-parser",
    "nbsphinx>=0.8.6",
    "numpydoc",
    "pydata-sphinx-theme",
    "Sphinx!=7.2.0,<8.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-copybutton>=0.5.2",
    "sphinx-design<0.6.0",
    "sphinx-gallery<0.15.0",
    "sphinx-issues<4.0.0",
    "sphinx-version-warning",
    "tabulate>=0.9.0",
]

dev = [
    "black>=24.3.0",
    "blacken-docs",
    "hypothesis",
    "pre-commit",
    "pytest",
    "pytest-xdist[psutil]",
    "pytest-cov",
    "pytest-mock",
    "pytest-anyio",  # For async test support
    "trio>=0.26.0",  # For testing trio backend support
    "github-actions",
    "importlib-metadata",
    "pip-tools",
    "pyright",
    "ruff",
    "autoflake",
    "typos",
    "tox",
    "tox-gh-actions",
    "pycobertura",
    "tomlkit"
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q -n auto --dist loadscope --max-worker-restart 3 --durations=20"
testpaths = [
    "tests",
]
markers = [
    "optional_deps: marks tests that require optional dependencies (automatically applied)",
    "core: marks tests that only require core dependencies (automatically applied)",
    "smoke: marks tests for smoke testing core functionality",
    "anyio: marks tests that use anyio for async testing",
    "slow: marks tests that are slow on Windows due to numerical computation performance",
    "ci_performance: marks performance tests that are flaky in CI due to runner variability",
]
filterwarnings = [
    # Ignore pkg_resources deprecation warnings from fs package (via statsforecast → fugue → triad → fs)
    # This is a known issue with setuptools >= 81 and the fs package hasn't updated yet
    # Jane Street style: Clean test output is non-negotiable
    "ignore:pkg_resources is deprecated.*:DeprecationWarning:fs",
    "ignore:pkg_resources is deprecated.*:UserWarning:fs",
    # Also ignore from pkg_resources itself
    "ignore:Deprecated call to.*:DeprecationWarning:pkg_resources",
]

# Remove the anyio config - we want to test with all backends

[tool.pytest.cov]
source = ["src/tsbootstrap"]

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312"]

[tool.ruff]
target-version = 'py310'
line-length = 100  # Must agree with Black

[tool.ruff.lint]
select = [
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # Error
    "F",  # pyflakes
    "I",  # isort
    "ISC", # flake8-implicit-str-concat
    "N",  # pep8-naming
    "PGH",  # pygrep-hooks
    "PTH", # flake8-use-pathlib
    "Q",  # flake8-quotes
    "S",  # bandit
    "SIM",  # flake8-simplify
    "TRY",  # tryceratops
    "UP",  # pyupgrade
    "W",  # pycodestyle warnings
    "YTT", # flake8-2020
]

exclude = [
    "migrations",
    "__pycache__",
    "manage.py",
    "settings.py",
    "env",
    ".env",
    "venv",
    ".venv",
]

ignore = [
    "B905",  # zip strict=true; remove once python <3.10 support is dropped.
    "C901",  # function is too complex; overly strict
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D200",
    "D401",
    "E402",
    "E501",  # line length handled by black
    "N802",  # Function name should be lowercase; overly strict
    "N803",  # Argument name should be lowercase; overly strict
    "N806",  # Variable in function should be lowercase; overly strict
    "N816",  # Variable in class scope should not be mixedCase; overly strict
    "PGH003",  # Use of "eval"; overly strict
    "SIM115",  # open-file-with-context-handler; overly strict
    "TRY003",  # Avoid specifying messages outside exception class; overly strict, especially for ValueError
    "UP038", # Use `X | Y` in `isinstance` call instead of `(X, Y)`; overly strict
    "UP007", # Use `X | Y` for type annotationsRuffUP007; overly strict
    "UP006", # Use `list` instead of `List` for type annotations; overly strict
    "UP035", # `typing.List` is deprecated, use `list` instead; overly strict
]

[tool.ruff.lint.isort]
order-by-type = true
relative-imports-order = "closest-to-furthest"
extra-standard-library = ["typing"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
known-first-party = []


[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "chr",
    "typer.Argument",
    "typer.Option",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "S101",  # use of "assert"
    "S102",  # use of "exec"
    "S106",  # possible hardcoded password.
    "PGH001",  # use of "eval"
]
"src/tsbootstrap/tests/*.py" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "S101",  # use of "assert"
    "S102",  # use of "exec"
    "S106",  # possible hardcoded password.
    "PGH001",  # use of "eval"
]

[tool.ruff.lint.pep8-naming]
staticmethod-decorators = [
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.interrogate]
ignore_init_module = true
ignore_init_class = true
ignore_magic = true
ignore_semiprivate = true
ignore_private = true
ignore_nested_functions = true
ignore_nested_classes = true
ignore_imports = false
exclude = [".venv/*", "tests/*", "docs/*", "build/*", "dist/*", "src/tsbootstrap/_version.py", "src/tsbootstrap/__init__.py", "src/tsbootstrap/utils/types.py"]

[tool.coverage.run]
source = ['src/']
omit = ['tests/*', '.venv/*', 'src/tsbootstrap/tests/*']

[tool.pyright]
include = ["src"]
exclude = ["**/__pycache__", "**/.pytest_cache", "build", "dist", ".venv", "venv"]
pythonVersion = "3.9"
pythonPlatform = "All"
typeCheckingMode = "basic"
reportMissingImports = false
reportMissingTypeStubs = false
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportUnknownVariableType = false
reportUnknownParameterType = false
reportMissingParameterType = false
reportPrivateUsage = false
reportImportCycles = true
reportUnnecessaryIsInstance = true
stubPath = "typings"
venvPath = "."
venv = ".venv"
