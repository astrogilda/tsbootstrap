[project]
name = "tsbootstrap"
version = "0.1.0"
description = "A Python package to generate bootstrapped time series"
maintainers = [
    { name = "Sankalp Gilda", email = "sankalp.gilda@gmail.com" },
    { name = "Franz Kiraly", email = "franz.kiraly@sktime.net"},
    { name = "Benedikt Heidrich", email = "benedikt.heidrich@sktime.net"},
]
authors = [
    { name = "Sankalp Gilda", email = "sankalp.gilda@gmail.com" },
]
license = { file = "LICENSE" }
readme = "README.md"
requires-python = ">=3.8,<3.13"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: Unix",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "numpy<1.27,>=1.21",
    "scikit-base>=0.6.1,<0.8.0",
    "scikit-learn>=0.24,<1.5.0",
    "scipy>=1.2,<2.0.0",
    "packaging",
]

[project.optional-dependencies]

all_extras = [
    "arch>=5.0.0,<6.0.0",
    "hmmlearn>=0.3.0,<0.3.2",
    "pyclustering>=0.10.0,<0.11.0",
    "scikit_learn_extra>=0.3.0,<0.4.0",
    "statsmodels>=0.12.1,<0.15.0",
]

docs = [
    "furo",
    "jupyter",
    "myst-parser",
    "nbsphinx>=0.8.6",
    "numpydoc",
    "pydata-sphinx-theme",
    "Sphinx!=7.2.0,<8.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-copybutton",
    "sphinx-design<0.6.0",
    "sphinx-gallery<0.15.0",
    "sphinx-issues<4.0.0",
    "sphinx-version-warning",
    "tabulate",
]

dev = [
    "black",
    "blacken-docs",
    "hypothesis",
    "pre-commit",
    "pytest",
    "pytest-cov",
]

[tool.poetry.dev-dependencies]
# Add your dev dependencies here, e.g.
black = "~23.10"
blacken-docs = "~1.16"
cython = "~3.0"
github-actions = "~0.0"
hypothesis = "~6.88"
importlib-metadata = "~6.8"
pip-tools = "~7.3"
pre-commit = "~3.5"
pytest = "~7.4"
pytest-cov = "~4.1"
pyright = "~1.1"
ruff = "~0.1"
typos = "~1.16"
tox = "~4.11"
tox-gh-actions = "~3.1"
pycobertura = "~3.2"
sphinx = "~7.2"
sphinx-rtd-theme = "^1.3.0"
tomlkit = "~0.12"

[tool.poetry.group.dev.dependencies]
bumpversion = "^0.6.0"
furo = "^2023.7.26"
jupyter = "*"
myst-parser = "*"
nbsphinx = "~0.8"
numpydoc = "*"
pydata-sphinx-theme = "*"
sphinx = "~7.2"
sphinx-copybutton = "*"
sphinx-design = "<0.6.0"
sphinx-gallery = "<0.15.0"
sphinx-issues = "<4.0.0"
sphinx-rtd-theme = "^1.3.0"
sphinx-version-warning = "*"
tabulate = "*"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "tests",
]

[tool.pytest.cov]
source = ["src/tsbootstrap"]

[tool.black]
line-length = 79
target-version = ["py310", "py311"]

[tool.ruff]
target-version = 'py310'
select = [
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # Error
    "F",  # pyflakes
    "I",  # isort
    "ISC", # flake8-implicit-str-concat
    "N",  # pep8-naming
    "PGH",  # pygrep-hooks
    "PTH", # flake8-use-pathlib
    "Q",  # flake8-quotes
    "S",  # bandit
    "SIM",  # flake8-simplify
    "TRY",  # tryceratops
    "UP",  # pyupgrade
    "W",  # pycodestyle warnings
    "YTT", # flake8-2020
]

exclude = [
    "migrations",
    "__pycache__",
    "manage.py",
    "settings.py",
    "env",
    ".env",
    "venv",
    ".venv",
]

ignore = [
    "B905",  # zip strict=true; remove once python <3.10 support is dropped.
    "C901",  # function is too complex; overly strict
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D200",
    "D401",
    "E402",
    "E501",  # line length handled by black
    "F401",
    "N802",  # Function name should be lowercase; overly strict
    "N803",  # Argument name should be lowercase; overly strict
    "N806",  # Variable in function should be lowercase; overly strict
    "N816",  # Variable in class scope should not be mixedCase; overly strict
    "PGH003",  # Use of "eval"; overly strict
    "SIM115",  # open-file-with-context-handler; overly strict
    "TRY003",  # Avoid specifying messages outside exception class; overly strict, especially for ValueError
]
line-length = 79  # Must agree with Black

[tool.ruff.isort]
order-by-type = true
relative-imports-order = "closest-to-furthest"
extra-standard-library = ["typing"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
known-first-party = []


[tool.ruff.flake8-bugbear]
extend-immutable-calls = [
    "chr",
    "typer.Argument",
    "typer.Option",
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.per-file-ignores]
"tests/*.py" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "S101",  # use of "assert"
    "S102",  # use of "exec"
    "S106",  # possible hardcoded password.
    "PGH001",  # use of "eval"
]

[tool.ruff.pep8-naming]
staticmethod-decorators = [
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.interrogate]
ignore_init_module = true
ignore_init_class = true
ignore_magic = true
ignore_semiprivate = true
ignore_private = true
ignore_nested_functions = true
ignore_nested_classes = true
ignore_imports = false
exclude = [".venv/*", "tests/*", "docs/*", "build/*", "dist/*", "src/tsbootstrap/_version.py", "src/tsbootstrap/__init__.py", "src/tsbootstrap/utils/types.py"]

[tool.coverage.run]
source = ['src/']
omit = ['tests/*', '.venv/*']
