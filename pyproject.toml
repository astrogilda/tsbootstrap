[tool.poetry]
name = "tsbootstrap"
version = "0.0.3"
description = "A Python package to generate bootstrapped time series"
authors = ["Sankalp Gilda <sankalp.gilda@gmail.com>"]
license = "MIT"
readme = "README.md"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS",
    "Operating System :: Unix",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
packages = [
    { include = "tsbootstrap", from = "src" },
]
include = ["src/tsbootstrap/py.typed"]
homepage = "https://tsbootstrap.readthedocs.io/en/latest/"

[tool.poetry.dependencies]
python = ">=3.10,<3.12"
arch = "~5.6"
hmmlearn = "~0.3"
numba = "~0.57"
pyclustering = "~0.10"
scikit_learn_extra = "~0.3"
cython = "~3.0"
importlib-metadata = "~6.8"
scipy = "~1.10"
furo = "^2023.7.26"

[tool.poetry.dev-dependencies]
# Add your dev dependencies here, e.g.
black = "~23.7"
blacken-docs = "~1.15"
github-actions = "~0.0"
hypothesis = "~6.82"
pip-tools = "~6.13"
pre-commit = "~3.3"
pytest = "~7.4"
pytest-cov = "~4.1"
pyright = "~1.1"
ruff = "~0.0"
typos = "~1.16"
tox = "~4.6"
tox-gh-actions = "~3.1"
pycobertura = "~3.2"

[tool.poetry.group.dev.dependencies]
sphinx = "^7.1.2"
sphinx-rtd-theme = "^1.2.2"
bumpversion = "^0.6.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


#[tool.pytest.ini_options]
#minversion = "6.0"
#addopts = "--cov=src/tsbootstrap -ra -q"
#testpaths = [
#    "tests",
#]


[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "tests",
]

[tool.pytest.cov]
source = ["src/tsbootstrap"]


[tool.black]
line-length = 79
target-version = ["py310", "py311"]

[tool.ruff]
target-version = 'py310'
select = [
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # Error
    "F",  # pyflakes
    "I",  # isort
    "ISC", # flake8-implicit-str-concat
    "N",  # pep8-naming
    "PGH",  # pygrep-hooks
    "PTH", # flake8-use-pathlib
    "Q",  # flake8-quotes
    "S",  # bandit
    "SIM",  # flake8-simplify
    "TRY",  # tryceratops
    "UP",  # pyupgrade
    "W",  # pycodestyle warnings
    "YTT", # flake8-2020
]

exclude = [
    "migrations",
    "__pycache__",
    "manage.py",
    "settings.py",
    "env",
    ".env",
    "venv",
    ".venv",
]

ignore = [
    "B905",  # zip strict=true; remove once python <3.10 support is dropped.
    "C901",  # function is too complex; overly strict
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D200",
    "D401",
    "E402",
    "E501",  # line length handled by black
    "F401",
    "N802",  # Function name should be lowercase; overly strict
    "N803",  # Argument name should be lowercase; overly strict
    "N806",  # Variable in function should be lowercase; overly strict
    "N816",  # Variable in class scope should not be mixedCase; overly strict
    "PGH003",  # Use of "eval"; overly strict
    "SIM115",  # open-file-with-context-handler; overly strict
    "TRY003",  # Avoid specifying messages outside exception class; overly strict, especially for ValueError
]
line-length = 79  # Must agree with Black

[tool.ruff.isort]
order-by-type = true
relative-imports-order = "closest-to-furthest"
extra-standard-library = ["typing"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
known-first-party = []


[tool.ruff.flake8-bugbear]
extend-immutable-calls = [
    "chr",
    "typer.Argument",
    "typer.Option",
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.per-file-ignores]
"tests/*.py" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "S101",  # use of "assert"
    "S102",  # use of "exec"
    "S106",  # possible hardcoded password.
    "PGH001",  # use of "eval"
]

[tool.ruff.pep8-naming]
staticmethod-decorators = [
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.interrogate]
ignore_init_module = true
ignore_init_class = true
ignore_magic = true
ignore_semiprivate = true
ignore_private = true
ignore_nested_functions = true
ignore_nested_classes = true
ignore_imports = false
exclude = [".venv/*", "tests/*", "docs/*", "build/*", "dist/*", "src/tsbootstrap/_version.py", "src/tsbootstrap/__init__.py", "src/tsbootstrap/utils/types.py"]

[tool.coverage.run]
source = ['src/']
omit = ['tests/*', '.venv/*']
