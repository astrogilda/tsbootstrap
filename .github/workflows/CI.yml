---
name: CI

on:
  - push

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    # Set up Python environment
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    # Install Poetry
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python -

    # Add Poetry to PATH
    - name: Add Poetry to PATH
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH

    # Cache Poetry dependencies
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    # Install dependencies
    - name: Install dependencies
      run: |
        poetry install

    # Install dtaidistance
    - name: Install dtaidistance
      run: |
        if [ "${{ matrix.python-version }}" != "3.10" ] && \
        [ "${{ matrix.python-version }}" != "3.11" ]; then \
          poetry run python -m pip install dtaidistance
        fi

    # Run pre-commit hooks
    #- name: Run pre-commit hooks
    #  uses: pre-commit/action@v3.0.0

    # Run tests
    - name: Test with pytest
      run: |
        poetry run python -m pytest tests -vv --cov=src/ \
        --cov-report term --junitxml=report.xml
    #    --cov-fail-under=${{ secrets.TEST_COVERAGE_THRESHOLD }} \

    # Generate coverage report
    - name: Generate coverage report
      run: |
        poetry run python -m coverage xml
        poetry run pycobertura show coverage.xml --format html --output coverage.html
      if: always()

    # Convert coverage report to markdown
    - name: Convert coverage report to markdown
      uses: docker://pandoc/core:3.1
      if: always()
      with:
        args: "coverage.html -t gfm -o coverage.md"

    # Generate concise coverage report
    - name: Generate concise coverage report
      if: always()
      run: |
        sed -n '/####/q;p' coverage.md > coverage_concise.md
        echo "</div>" >> coverage_concise.md

    # Retrieve PR number to publish coverage report to
   # - name: Retrieve PR number to publish coverage report to
   #   uses: jwalton/gh-find-current-pr@v1
   #   id: finder
   #   if: always()
   #   with:
   #     state: all
   #   env:
   #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Add coverage report to PR
    #- name: Add coverage report to PR
    #  uses: marocchino/sticky-pull-request-comment@v2
    #  if: always()
    #  with:
    #    number: ${{ steps.finder.outputs.pr }}
    #    recreate: true
    #    path: coverage_concise.md

    # Upload coverage report
    #- name: Upload coverage report
    #  uses: actions/upload-artifact@v2
    #  with:
    #    name: coverage
    #    path: coverage.md

    # Publish coverage report to PR
    #- name: Publish coverage to PR
    #  uses: codecov/codecov-action@v3
    #  with:
    #    token: ${{ secrets.CODECOV_TOKEN }}
    #    fail_ci_if_error: true
    #    verbose: true

  #commitlint:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v3
  #      with:
  #        fetch-depth: 0
  #    - uses: wagoid/commitlint-github-action@v4
