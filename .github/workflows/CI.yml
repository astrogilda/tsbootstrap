name: CI

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'tests/**'
      - '.github/workflows/CI.yml'
      - 'pyproject.toml'
      - 'docs/**'
  pull_request:
    branches:
      - main
      - 'release**'
    paths:
      - 'src/**'
      - 'tests/**'
      - '.github/workflows/CI.yml'
      - 'pyproject.toml'
      - 'docs/**'

jobs:
  test-nodevdeps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Display Python version
        run: |
          python -c "import sys; print(sys.version)"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$(python -m site --user-base)/bin" >> $GITHUB_PATH

      - name: Create virtual environment
        run: |
          uv venv .venv

      - name: Install package and core dependencies
        run: |
          source .venv/bin/activate
          uv pip install .

      - name: Run pytest-free tests
        run: |
          source .venv/bin/activate
          python tests/_nopytest_tests.py

  test-no-softdeps:
    needs: test-nodevdeps
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install uv on Windows
        if: runner.os == 'Windows'
        run: irm https://astral.sh/uv/install.ps1 | iex
        shell: pwsh

      - name: Install uv on Linux and macOS
        if: runner.os != 'Windows'
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
        shell: bash

      - name: Update PATH
        run: echo "$(python -m site --user-base)/bin" >> $GITHUB_PATH
        shell: pwsh

      - name: Create virtual environment
        run: |
          uv venv .venv

      - name: Install package and dependencies on Linux and macOS
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          uv pip install .[dev] --no-cache-dir
        shell: bash

      - name: Install package and dependencies on Windows
        if: runner.os == 'Windows'
        run: |
          .\.venv\Scripts\Activate.ps1
          uv pip install .[dev] --no-cache-dir
        shell: pwsh

      # - name: Show dependencies
      #   run: |
      #     if [[ "${{ runner.os }}" == "Windows" ]]; then
      #       .venv\Scripts\activate
      #     else
      #       source .venv/bin/activate
      #     fi
      #     uv pip list

      # - name: Show available branches
      #   run: |
      #     git branch -a

      - name: Run tests on Linux and macOS
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          python -m pytest src/ tests/ -vv
        shell: bash

      - name: Run tests on Windows
        if: runner.os == 'Windows'
        run: |
          .\.venv\Scripts\Activate.ps1
          python -m pytest src/ tests/ -vv
        shell: pwsh


  test-all-softdeps:
    needs: test-no-softdeps
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display Python version
        run: |
           python -c "import sys; print(sys.version)"

      - name: Install uv on Windows
        if: runner.os == 'Windows' && matrix.python-version != '3.12'
        run: irm https://astral.sh/uv/install.ps1 | iex
        shell: pwsh

      - name: Install uv on Linux and macOS
        if: runner.os != 'Windows'
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
        shell: bash

      - name: Update PATH
        if: runner.os != 'Windows' || matrix.python-version != '3.12'
        run: echo "$(python -m site --user-base)/bin" >> $GITHUB_PATH
        shell: pwsh

      - name: Create virtual environment
        if: runner.os != 'Windows' || matrix.python-version != '3.12'
        run: uv venv .venv

      - name: Install package and dependencies on Linux and macOS
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          uv pip install .[all_extras,dev] --no-cache-dir
        shell: bash

      - name: Install package and dependencies on Windows
        if: runner.os == 'Windows' && matrix.python-version != '3.12'
        run: |
          .\.venv\Scripts\Activate.ps1
          uv pip install .[all_extras,dev] --no-cache-dir
        shell: pwsh


      # - name: Show dependencies
      #   run: |
      #     if [[ "${{ runner.os }}" == "Windows" ]]; then
      #       .venv\Scripts\activate
      #     else
      #       source .venv/bin/activate
      #     fi
      #     uv pip list

      # - name: Show available branches
      #   run: |
      #      git branch -a

      - name: Run tests on Linux and macOS
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          python -m pytest src/ tests/ -vv
        shell: bash

      - name: Run tests on Windows
        if: runner.os == 'Windows' && matrix.python-version != '3.12'
        run: |
          .\.venv\Scripts\Activate.ps1
          python -m pytest src/ tests/ -vv
        shell: pwsh

      - name: Publish code coverage
        if: runner.os != 'Windows' || matrix.python-version != '3.12'
        uses: codecov/codecov-action@v4


    # Add coverage report to PR
    #- name: Add coverage report to PR
    #  uses: marocchino/sticky-pull-request-comment@v2
    #  if: always()
    #  with:
    #    number: ${{ steps.finder.outputs.pr }}
    #    recreate: true
    #    path: coverage_concise.md

    # Upload coverage report
    #- name: Upload coverage report
    #  uses: actions/upload-artifact@v4
    #  with:
    #    name: coverage
    #    path: coverage.md

    # Publish coverage report to PR
    #- name: Publish coverage to PR
    #  uses: codecov/codecov-action@v3
    #  with:
    #    token: ${{ secrets.CODECOV_TOKEN }}
    #    fail_ci_if_error: true
    #    verbose: true

  # commitlint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - uses: wagoid/commitlint-github-action@v4


  docs:
    name: Test docs build
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install uv
        run: |
          pip install uv
          echo "$(python -m site --user-base)/bin" >> $GITHUB_PATH

      - name: Create virtual environment
        run: |
          uv venv .venv

      # Install package and dependencies
      - name: Install package and dependencies
        run: |
          source .venv/bin/activate
          uv pip install .[dev,docs] --no-cache-dir

      # Build sphinx documentation
      - name: Build sphinx documentation
        run: |
          source .venv/bin/activate
          cd docs
          make clean
          make html --debug --jobs 2 SPHINXOPTS=" -W -v"

      # Upload built docs
      - name: Upload built docs
        uses: actions/upload-artifact@v4
        with:
          name: docs-results-${{ runner.os }}
          path: docs/build/html/
        # Use always() to always run this step to publish test results when there are test failures
        if: success()
